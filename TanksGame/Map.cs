using System;
using System.Text;

namespace TanksGame
{
    public class Map
    {
        private readonly char[,] _map;
        private readonly int[,] _wallHealth;
        public const int CELL_SIZE = 2;
        public int Width { get; }
        public int Height { get; }

        private const char EMPTY = ' ';
        private const char WALL = '█';
        private const char DESTRUCTIBLE_WALL = '▓';
        private const char DAMAGED_WALL = '▒';
        private const char WATER = '~';
        private const char GRID_WALL = '▀';

        public Map(int level)
        {
            switch (level)
            {
                case 1:
                    _map = new char[,]
                    {
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', ' ', '▀', ' ', ' ', ' ', ' ', ' ', ' ', '▀', ' ', '▓', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', '▓', ' ', ' ', ' ', '▀', ' ', '~', ' ', '▀', ' ', ' ', '▓', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▀', ' ', ' ', '▓', ' ', ' ', '▓', ' ', ' ', '▓', ' ', ' ', ' ', ' ', '▀', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', '▀', ' ', '▓', ' ', '▓', ' ', '▓', ' ', '▀', ' ', '▓', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'}
                    };
                    break;

                case 2:
                    _map = new char[,]
                    {
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', '▓', ' ', '█', ' ', '█', ' ', '█', ' ', '█', ' ', '█', ' ', '▓', '▓', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '~', '~', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', '▓', ' ', '█', ' ', '█', ' ', ' ', ' ', ' ', '█', ' ', '█', ' ', '▓', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█', '█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'}
                    };
                    break;

                case 3:
                    _map = new char[,]
                    {
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', '▓', ' ', '█', ' ', '▓', '▓', ' ', ' ', '▓', '▓', ' ', '█', ' ', '▓', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '~', '~', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', '▓', ' ', '█', ' ', '▓', '▓', ' ', ' ', '▓', '▓', ' ', '█', ' ', '▓', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█', '█', ' ', '█', ' ', '▓', '▓', ' ', '█', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'}
                    };
                    break;

                case 4:
                    _map = new char[,]
                    {
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', '▀', ' ', ' ', '▓', ' ', ' ', '▓', ' ', ' ', '▀', ' ', ' ', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▀', ' ', '▓', ' ', ' ', '▀', ' ', '~', '~', ' ', '▀', ' ', ' ', '▓', ' ', '▀', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', '▀', ' ', ' ', '▓', ' ', ' ', '▓', ' ', ' ', '▀', ' ', ' ', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▀', ' ', '▓', ' ', ' ', '▀', ' ', '▓', '▓', ' ', '▀', ' ', ' ', '▓', ' ', '▀', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'}
                    };
                    break;

                case 5:
                    _map = new char[,]
                    {
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', '▀', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', '▀', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', '▀', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '▀', ' ', ' ', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', ' ', '▓', ' ', ' ', ' ', ' ', ' ', ' ', '~', '~', ' ', ' ', ' ', ' ', ' ', ' ', '▓', ' ', '█'},
                        {'█', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '█'},
                        {'█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█', '█'}
                    };
                    break;

                default:
                    throw new ArgumentException("Invalid level number");
            }

            Height = _map.GetLength(0);
            Width = _map.GetLength(1);

            _wallHealth = new int[Height, Width];
            for (int y = 0; y < Height; y++)
            {
                for (int x = 0; x < Width; x++)
                {
                    if (_map[y, x] == DESTRUCTIBLE_WALL)
                    {
                        _wallHealth[y, x] = 3;
                    }
                }
            }
        }

        public char[,] GetMapArray()
        {
            return _map;
        }

        public bool IsWall(int x, int y)
        {
            if (!IsValidCoordinate(x, y)) return false;
            return _map[y, x] == WALL;
        }

        public bool IsWater(int x, int y)
        {
            if (!IsValidCoordinate(x, y)) return false;
            return _map[y, x] == WATER;
        }

        public bool IsDestructible(int x, int y)
        {
            if (!IsValidCoordinate(x, y)) return false;
            return _map[y, x] == DESTRUCTIBLE_WALL || _map[y, x] == DAMAGED_WALL;
        }

        public void DamageWall(int x, int y)
        {
            if (!IsDestructible(x, y)) return;

            _wallHealth[y, x]--;
            if (_wallHealth[y, x] <= 0)
            {
                _map[y, x] = EMPTY;
            }
            else if (_wallHealth[y, x] == 1)
            {
                _map[y, x] = DAMAGED_WALL;
            }
        }

        public bool IsValidPosition(int x, int y)
        {
            if (!IsValidCoordinate(x, y)) return false;
            char tile = _map[y, x];
            return tile == EMPTY;
        }

        public bool CanShootThrough(int x, int y)
        {
            if (!IsValidCoordinate(x, y)) return false;
            char tile = _map[y, x];
            return tile == EMPTY || tile == WATER || IsDestructible(x, y);
        }

        private bool IsValidCoordinate(int x, int y)
        {
            return x >= 0 && x < Width && y >= 0 && y < Height;
        }

        public void DrawTile(int x, int y, StringBuilder buffer)
        {
            if (!IsValidCoordinate(x, y)) return;

            char tile = _map[y, x];
            switch (tile)
            {
                case DESTRUCTIBLE_WALL:
                case DAMAGED_WALL:
                    buffer.Append("\x1b[33;1m"); // желтый для разрушаемых стен
                    buffer.Append(tile);
                    buffer.Append("\x1b[0m");
                    break;
                case GRID_WALL:
                    buffer.Append("\x1b[37;1m"); // белый для решеток
                    buffer.Append(tile);
                    buffer.Append("\x1b[0m");
                    break;
                case WATER:
                    buffer.Append("\x1b[34m"); // Синий
                    buffer.Append(tile);
                    buffer.Append("\x1b[0m");
                    break;
                case WALL:
                    buffer.Append("\x1b[37m"); // Белый
                    buffer.Append(tile);
                    buffer.Append("\x1b[0m");
                    break;
                default:
                    buffer.Append(tile);
                    break;
            }
        }
    }
} 